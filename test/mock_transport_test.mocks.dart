// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_mcp/test/mock_transport_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_mcp/src/models/models.dart' as _i2;
import 'package:flutter_mcp/src/transports/transport.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMcpResponse_0 extends _i1.SmartFake implements _i2.McpResponse {
  _FakeMcpResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [McpClientTransport].
///
/// See the documentation for Mockito's code generation for more information.
class MockMcpClientTransport extends _i1.Mock
    implements _i3.McpClientTransport {
  MockMcpClientTransport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i4.Stream<_i2.McpRequest> get requests =>
      (super.noSuchMethod(
            Invocation.getter(#requests),
            returnValue: _i4.Stream<_i2.McpRequest>.empty(),
          )
          as _i4.Stream<_i2.McpRequest>);

  @override
  _i4.Stream<_i2.McpNotification> get notifications =>
      (super.noSuchMethod(
            Invocation.getter(#notifications),
            returnValue: _i4.Stream<_i2.McpNotification>.empty(),
          )
          as _i4.Stream<_i2.McpNotification>);

  @override
  _i4.Future<void> connect() =>
      (super.noSuchMethod(
            Invocation.method(#connect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.McpResponse> sendRequest(_i2.McpRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#sendRequest, [request]),
            returnValue: _i4.Future<_i2.McpResponse>.value(
              _FakeMcpResponse_0(
                this,
                Invocation.method(#sendRequest, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.McpResponse>);

  @override
  _i4.Future<void> sendNotification(_i2.McpNotification? notification) =>
      (super.noSuchMethod(
            Invocation.method(#sendNotification, [notification]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> sendResponse(_i2.McpResponse? response) =>
      (super.noSuchMethod(
            Invocation.method(#sendResponse, [response]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
